import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:image_picker/image_picker.dart';
import 'package:intl/intl.dart';
import 'package:http/http.dart' as http;
import 'package:quickalert/quickalert.dart';
import 'package:registration_evaluation_app/screens/academic/academicScreen.dart';
import 'package:registration_evaluation_app/screens/academic/payments/editPaymentPage.dart';
import 'package:registration_evaluation_app/screens/academic/registation/New/newStdPay.dart';
import 'package:registration_evaluation_app/services/EmployeesService.dart';
import 'package:registration_evaluation_app/services/RegistrationService.dart';

class RegisterStaff extends StatefulWidget {
  const RegisterStaff({super.key});

  @override
  State<RegisterStaff> createState() => _RegisterStaffState();
}

List<String> opt = ["", "Male", "Famale"];

class _RegisterStaffState extends State<RegisterStaff> {
  final _formKey = GlobalKey<FormState>();
  String currentOpt = opt[0];
  TextEditingController txtdob = TextEditingController();

  File? _selectedImage; //Upload Images
  final picker = ImagePicker();

  //‡∫ó‡∫µ‡ªà‡∫¢‡ªà‡∫π‡∫õ‡∫±‡∫î‡∫à‡∫∏‡∫ö‡∫±‡∫ô
  List<dynamic> provincesNData = [];
  List<dynamic> filteredDistrictsNData = [];
  List<dynamic> districtsNData = [];
  int? _valueProN;
  int? _valueDisN;

  //‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫ï‡∫≥‡ªÅ‡ªú‡ªà‡∫á‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô
  List<dynamic> roleData = [];
  int? _valueRole;

  bool _isLoading = false;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    _fetchAllDropdownData(); // Call the data fetching function when the widget is created
  }

  // static const String baseUrl = "http://192.168.0.104:3000";

  static const String baseUrl = "http://10.34.64.243:3000";

  Future<void> _fetchAllDropdownData() async {
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á List ‡∏Ç‡∏≠‡∏á Future ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ API call
      List<Future<http.Response>> futures = [
        http.get(Uri.parse("$baseUrl/province")),
        http.get(Uri.parse("$baseUrl/district")),
        http.get(Uri.parse("$baseUrl/role")),
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° API ‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      ];

      // 2. ‡πÉ‡∏ä‡πâ Future.wait ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å API call ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
      List<http.Response> responses = await Future.wait(futures);

      //‡∫ó‡∫µ‡ªà‡∫¢‡ªà‡∫π‡∫õ‡∫±‡∫î‡∫à‡∫∏‡∫ö‡∫±‡∫ô
      if (responses[0].statusCode == 200) {
        provincesNData = jsonDecode(responses[0].body);
        print('Districts data loaded: ${provincesNData.length} items');
      } else {
        throw Exception(
            'Failed to load districts data: ${responses[0].statusCode}');
      }

      if (responses[1].statusCode == 200) {
        districtsNData = jsonDecode(responses[1].body);
        print('Districts data loaded: ${districtsNData.length} items');
      } else {
        throw Exception(
            'Failed to load districts data: ${responses[1].statusCode}');
      }

      if (responses[2].statusCode == 200) {
        roleData = jsonDecode(responses[2].body);
        print('Districts data loaded: ${roleData.length} items');
      } else {
        throw Exception(
            'Failed to load districts data: ${responses[2].statusCode}');
      }

      // 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
      setState(() {
        _isLoading = false;
      });
    } catch (error) {
      setState(() {
        _isLoading = false;
        _errorMessage = 'An unexpected error occurred: $error';
      });
      print('Error fetching all dropdown data: $error');
    }
  }

  final TextEditingController _empID = TextEditingController();
  final TextEditingController _empName = TextEditingController();
  final TextEditingController _empSurname = TextEditingController();
  final TextEditingController _villageNow = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final _phoneController = TextEditingController();

  String formatEmailForDatabase(String input) {
    // Trim spaces and ensure it's in lower case for consistency
    return input.trim().toLowerCase();
  }

  String validateEmail(String email) {
    // Regular expression to validate email
    String emailPattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$';
    RegExp regExp = RegExp(emailPattern);

    if (regExp.hasMatch(email)) {
      return email; // Return valid email
    } else {
      return ''; // Invalid email format
    }
  }

  String formatPhoneForDatabase(String input) {
    // ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡∏µ‡∏î‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    return input.replaceAll(RegExp(r'\s|-'), '');
  }

  Future<void> _submitNewStaff() async {
    if (_formKey.currentState!.validate()) {
      if (_valueDisN == null || _valueRole == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              "‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡ªÉ‡∫´‡ªâ‡∫Ñ‡∫ª‡∫ö‡∫ñ‡ªâ‡∫ß‡∫ô",
              style: TextStyle(
                fontFamily: 'Phetsarath',
              ),
            ), // Please select a province
            backgroundColor: Colors.orange,
          ),
        );
        return; // Stop submission if no province is selected
      }

      bool success = await Employeesservice.addEmployees(
        _empID.text,
        _empName.text,
        _empSurname.text,
        txtdob.text,
        currentOpt,
        _villageNow.text,
        _valueDisN!,
        _phoneController.text,
        _emailController.text,
        _valueRole!,
        _selectedImage, // üëà ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      );
      if (success) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              "‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô‡ªÉ‡ªù‡ªà‡∫ñ‡∫∑‡∫Å‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î‡ªÅ‡∫•‡ªâ‡∫ß",
              style: TextStyle(
                fontFamily: 'Phetsarath',
              ),
            ),
            backgroundColor: Colors.green,
          ),
        );
        Navigator.of(context).pop();

        Navigator.of(context).pop();
        showAlert();
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              "‡∫Ç‡ªç‡∫≠‡∫∞‡ªÑ‡∫û!‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î",
              style: TextStyle(
                fontFamily: 'Phetsarath',
              ),
            ),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void showAlert() {
    QuickAlert.show(
      context: context,
      title: "‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î",
      type: QuickAlertType.success,
      confirmBtnTextStyle: TextStyle(
        fontFamily: 'Phetsarath',
        color: Colors.white, // Replace with your desired font
        fontSize: 16,
        fontWeight: FontWeight.bold,
      ),
      confirmBtnColor: Colors.green,
      confirmBtnText: "‡∫ï‡∫ª‡∫Å‡∫•‡∫ª‡∫á",
    );
  }

  void Confirm() async {
    print("Confirm");
    if (!mounted) {
      return;
    }

    showDialog(
      context: context,
      builder: (BuildContext dialogContext) {
        return AlertDialog(
          title: Text(
            '‡∫¢‡∫∑‡∫ô‡∫ç‡∫±‡∫ô‡∫Å‡∫≤‡∫ô‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å',
            style: TextStyle(
              fontFamily: 'Phetsarath',
              fontWeight: FontWeight.bold,
            ),
          ),
          content: Text(
            '‡∫ó‡ªà‡∫≤‡∫ô‡ªÅ‡∫ô‡ªà‡ªÉ‡∫à‡∫ß‡ªà‡∫≤‡∫à‡∫∞‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫´‡∫º‡∫∑‡∫ö‡ªç‡ªà?',
            style: TextStyle(
              fontSize: 18,
              fontFamily: 'Phetsarath',
            ),
          ),
          actions: [
            TextButton(
              style: TextButton.styleFrom(
                backgroundColor: Colors.orange,
                minimumSize: Size(
                  80,
                  50,
                ), // ‡∫õ‡∫±‡∫ö‡∫Ç‡∫∞‡ªú‡∫≤‡∫î (‡∫Å‡∫ß‡ªâ‡∫≤‡∫á x ‡∫™‡∫π‡∫á)
                padding: EdgeInsets.symmetric(
                  horizontal: 16,
                  vertical: 12,
                ),
              ),
              onPressed: () {
                Navigator.of(dialogContext).pop();
              },
              child: Text(
                '‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å',
                style: TextStyle(
                  fontFamily: 'Phetsarath',
                  color: Colors.white,
                ),
              ),
            ),
            TextButton(
              style: TextButton.styleFrom(
                backgroundColor: Colors.green,
                minimumSize: Size(
                  80,
                  50,
                ), // ‡∫õ‡∫±‡∫ö‡∫Ç‡∫∞‡ªú‡∫≤‡∫î (‡∫Å‡∫ß‡ªâ‡∫≤‡∫á x ‡∫™‡∫π‡∫á)
                padding: EdgeInsets.symmetric(
                  horizontal: 16,
                  vertical: 12,
                ),
              ),
              onPressed: () {
                if (_valueDisN == null || _valueRole == null) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text(
                        "‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫ï‡∫ª‡∫ß‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫Å‡ªà‡∫≠‡∫ô",
                        style: TextStyle(
                          fontFamily: 'Phetsarath',
                        ),
                      ), // Please select a province
                      backgroundColor: Colors.orange,
                    ),
                  );
                  Navigator.of(context).pop();
                  return; // Stop submission if no province is selected
                } else {
                  _submitNewStaff();
                }
              },
              child: Text(
                '‡∫ï‡∫ª‡∫Å‡∫•‡∫ª‡∫á',
                style: TextStyle(
                  fontFamily: 'Phetsarath',
                  color: Colors.white,
                ),
              ),
            ),
          ],
        );
      },
    );
  }

  Future<void> selectDataOBirth() async {
    try {
      DateTime? date1 = await showDatePicker(
        context: context,
        initialDate: DateTime.now(),
        firstDate: DateTime(1990),
        lastDate: DateTime.now(),
      );

      setState(
        () {
          if (date1 != null) {
            //txtdob.text = date1.toString().split("")[0];
            txtdob.text = DateFormat("yyyy-MM-dd").format(date1);
          } else {
            txtdob.text = DateFormat("dd/MM/yyyy").format(
              DateTime.now(),
            );
          }
        },
      );
    } catch (e) {
      print(e);
    }
  }

  //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û:
  Future<void> _pickImage() async {
    final pickedFile = await picker.pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() {
        _selectedImage = File(pickedFile.path);
      });
    }
  }

  @override
  void dispose() {
    _empID.dispose();
    _empName.dispose();
    _empSurname.dispose();
    _villageNow.dispose();
    _phoneController.dispose();
    _emailController.dispose();
    txtdob.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        iconTheme: IconThemeData(
          color: Colors.white,
        ),
        backgroundColor: Colors.blueAccent,
        title: Text(
          "‡∫•‡∫ª‡∫á‡∫ó‡∫∞‡∫ö‡∫Ω‡∫ô‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡ªÉ‡ªù‡ªà",
          style: TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
            fontFamily: 'Phetsarath',
          ),
        ),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(10),
          child: Form(
            key: _formKey,
            child: Column(
              children: [
                SizedBox(
                  height: 20,
                ),
                Text(
                  "‡∫õ‡ªâ‡∫≠‡∫ô‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô",
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                    fontFamily: 'Phetsarath',
                  ),
                ),
                SizedBox(
                  height: 20,
                ),
                GestureDetector(
                  onTap: _pickImage,
                  child: CircleAvatar(
                    radius: 90,
                    backgroundColor: Colors.grey.shade200,
                    backgroundImage: _selectedImage != null
                        ? FileImage(_selectedImage!)
                        : null,
                    child: _selectedImage == null
                        ? Icon(Icons.camera_alt, size: 40, color: Colors.grey)
                        : null,
                  ),
                ),
                SizedBox(
                  height: 20,
                ),
                TextFormField(
                  controller: _empID,
                  style: TextStyle(
                    fontFamily: 'Phetsarath',
                  ),
                  decoration: InputDecoration(
                    labelText: '‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô',
                    labelStyle: TextStyle(
                      fontFamily: 'Phetsarath',
                    ),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ô‡∫±‡∫Å‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô';
                    }
                    return null;
                  },
                ),
                SizedBox(
                  height: 10,
                ),
                Row(
                  children: [
                    Expanded(
                      child: TextFormField(
                        controller: _empName,
                        style: TextStyle(
                          fontFamily: 'Phetsarath',
                        ),
                        decoration: InputDecoration(
                          labelText: '‡∫ä‡∫∑‡ªà',
                          labelStyle: TextStyle(
                            fontFamily: 'Phetsarath',
                          ),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫ä‡∫∑‡ªà‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô';
                          }
                          return null;
                        },
                      ),
                    ),
                    SizedBox(
                      width: 10,
                    ),
                    Expanded(
                      child: TextFormField(
                        controller: _empSurname,
                        style: TextStyle(
                          fontFamily: 'Phetsarath',
                        ),
                        decoration: InputDecoration(
                          labelText: '‡∫ô‡∫≤‡∫°‡∫™‡∫∞‡∫Å‡∫∏‡∫ô',
                          labelStyle: TextStyle(
                            fontFamily: 'Phetsarath',
                          ),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫ô‡∫≤‡∫°‡∫™‡∫∞‡∫Å‡∫∏‡∫ô';
                          }
                          return null;
                        },
                      ),
                    ),
                  ],
                ),
                SizedBox(
                  height: 10,
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.start,
                  children: [
                    Expanded(
                      child: Container(
                        height: 50,
                        decoration: BoxDecoration(
                            border: Border.all(),
                            borderRadius: BorderRadius.circular(10)),
                        child: Row(
                          children: [
                            Expanded(
                              // Directly Expanded within the outer Row
                              child: Container(
                                height: 50,
                                child: Row(
                                  children: [
                                    SizedBox(
                                      // Use SizedBox here if you want to limit the width of the Radio button itself, or remove it if you want the Radio to expand.
                                      width:
                                          50, // Example: Give some fixed width to the radio to prevent it from taking too much space. Adjust as needed.
                                      child: Radio(
                                        value: opt[1],
                                        groupValue: currentOpt,
                                        onChanged: (value) {
                                          setState(
                                            () {
                                              currentOpt = value.toString();
                                            },
                                          );
                                        },
                                      ),
                                    ),
                                    Expanded(
                                      // This Expanded is within its own inner Row, which is fine.
                                      child: Text(
                                        "‡∫ä‡∫≤‡∫ç",
                                        style: TextStyle(
                                          fontFamily: 'Phetsarath',
                                        ),
                                      ),
                                    )
                                  ],
                                ),
                              ),
                            ),
                            SizedBox(
                              width: 10,
                            ),
                            Expanded(
                              // Directly Expanded within the outer Row
                              child: Container(
                                height: 50,
                                child: Row(
                                  children: [
                                    SizedBox(
                                      // Use SizedBox here if you want to limit the width of the Radio button itself.
                                      width:
                                          50, // Example: Give some fixed width to the radio. Adjust as needed.
                                      child: Radio(
                                        value: opt[2],
                                        groupValue: currentOpt,
                                        onChanged: (value) {
                                          setState(
                                            () {
                                              currentOpt = value.toString();
                                            },
                                          );
                                        },
                                      ),
                                    ),
                                    Expanded(
                                      // This Expanded is within its own inner Row, which is fine.
                                      child: Text(
                                        "‡∫ç‡∫¥‡∫á",
                                        style: TextStyle(
                                          fontFamily: 'Phetsarath',
                                        ),
                                      ),
                                    )
                                  ],
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    SizedBox(
                      width: 10,
                    ),
                    Expanded(
                      child: TextField(
                        controller: txtdob,
                        decoration: InputDecoration(
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                          filled: true,
                          fillColor: Colors.white,
                          prefixIcon: Icon(
                            Icons.calendar_today,
                            size: 30,
                            color: Colors.green,
                          ),
                          labelText: "‡∫ß‡∫±‡∫ô‡ªÄ‡∫î‡∫∑‡∫≠‡∫ô‡∫õ‡∫µ‡ªÄ‡∫Å‡∫µ‡∫î",
                          labelStyle: TextStyle(
                            fontFamily: 'Phetsarath',
                          ),
                        ),
                        readOnly: true,
                        onTap: () {
                          selectDataOBirth();
                        },
                      ),
                    ),
                  ],
                ),
                SizedBox(
                  height: 10,
                ),
                SizedBox(
                  height: 10,
                ),
                SizedBox(
                  height: 10,
                ),
                Row(
                  children: [
                    Expanded(
                      child: Container(
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(10),
                          border: Border.all(
                              color: Colors.black, width: 1), // Border
                        ),
                        child: DropdownButton(
                          padding: EdgeInsets.fromLTRB(10, 0, 0, 0),
                          underline: SizedBox.shrink(),
                          borderRadius: BorderRadius.circular(20),
                          isExpanded: true,
                          items: provincesNData.map((e) {
                            return DropdownMenuItem(
                              child: Text(
                                e["pname"],
                                style: TextStyle(
                                  fontFamily: 'Phetsarath',
                                ),
                              ),
                              value: e["pid"],
                            );
                          }).toList(),
                          value: _valueProN,
                          onChanged: (v) {
                            setState(() {
                              _valueProN = v as int;
                              // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ï‡∏≤‡∏°‡πÅ‡∏Ç‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                              filteredDistrictsNData = districtsNData
                                  .where((district) =>
                                      district["pid"] == _valueProN)
                                  .toList();
                              // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏Ç‡∏ß‡∏á
                              _valueDisN =
                                  null; // ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏Å‡πá‡πÑ‡∏î‡πâ
                            });
                          },
                          hint: Text(
                            "‡ªÅ‡∫Ç‡∫ß‡∫á‡∫õ‡∫±‡∫î‡∫à‡∫∏‡∫ö‡∫±‡∫î",
                            style: TextStyle(
                              fontFamily: 'Phetsarath',
                            ),
                          ),
                        ),
                      ),
                    ),
                    SizedBox(
                      width: 10,
                    ),
                    Expanded(
                      child: Container(
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(10),
                          border: Border.all(
                              color: Colors.black, width: 1), // Border
                        ),
                        child: DropdownButton(
                          padding: EdgeInsets.fromLTRB(10, 0, 0, 0),
                          underline: SizedBox.shrink(),
                          borderRadius: BorderRadius.circular(20),
                          isExpanded: true,
                          items: filteredDistrictsNData.map((e) {
                            return DropdownMenuItem(
                              child: Text(
                                e["dname"],
                                style: TextStyle(
                                  fontFamily: 'Phetsarath',
                                ),
                              ),
                              value: e["dsid"],
                            );
                          }).toList(),
                          value: _valueDisN,
                          onChanged: (v) {
                            setState(() {
                              _valueDisN = v as int;
                            });
                          },
                          hint: Text(
                            "‡ªÄ‡∫°‡∫∑‡∫≠‡∫á",
                            style: TextStyle(
                              fontFamily: 'Phetsarath',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
                SizedBox(
                  height: 10,
                ),
                Row(
                  children: [
                    Expanded(
                      child: Container(
                        child: TextFormField(
                          controller: _villageNow,
                          style: TextStyle(
                            fontFamily: 'Phetsarath',
                          ),
                          decoration: InputDecoration(
                            labelText: '‡∫ö‡ªâ‡∫≤‡∫ô‡∫¢‡∫π‡ªà‡∫õ‡∫±‡∫î‡∫à‡∫∏‡∫ö‡∫±‡∫ô',
                            labelStyle: TextStyle(
                              fontFamily: 'Phetsarath',
                            ),
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫ä‡∫∑‡ªà‡ªÄ‡∫°‡∫∑‡∫≠‡∫á';
                            }
                            return null;
                          },
                        ),
                      ),
                    ),
                    SizedBox(
                      width: 10,
                    ),
                    Spacer()
                  ],
                ),
                SizedBox(
                  height: 10,
                ),
                Row(
                  children: [
                    Expanded(
                      child: TextFormField(
                        controller: _emailController,
                        style: TextStyle(
                          fontFamily: 'Phetsarath',
                        ),
                        keyboardType: TextInputType.emailAddress,
                        decoration: InputDecoration(
                          labelText: '‡∫≠‡∫µ‡ªÄ‡∫°‡∫ß',
                          labelStyle: TextStyle(
                            fontFamily: 'Phetsarath',
                          ),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                        ),
                        onChanged: (value) {
                          // Automatically format email as the user types
                          String formattedEmail = formatEmailForDatabase(value);
                          _emailController.value =
                              _emailController.value.copyWith(
                            text: formattedEmail,
                            selection: TextSelection.collapsed(
                                offset: formattedEmail.length),
                          );
                        },
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫ä‡∫∑‡ªà‡ªÄ‡∫°‡∫∑‡∫≠‡∫á';
                          }
                          return null;
                        },
                      ),
                    ),
                    SizedBox(
                      width: 10,
                    ),
                    Expanded(
                      child: TextFormField(
                        controller: _phoneController,
                        style: TextStyle(
                          fontFamily: 'Phetsarath',
                        ),
                        keyboardType: TextInputType.number,
                        maxLength: 13,
                        inputFormatters: [
                          FilteringTextInputFormatter.digitsOnly,
                          PhoneNumberTextInputFormatter(),
                        ],
                        decoration: InputDecoration(
                          labelText: '‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó‡∫•‡∫∞‡∫™‡∫±‡∫ö',
                          labelStyle: TextStyle(
                            fontFamily: 'Phetsarath',
                          ),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                          counterText: "",
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫ä‡∫∑‡ªà‡ªÄ‡∫°‡∫∑‡∫≠‡∫á';
                          }
                          return null;
                        },
                      ),
                    ),
                  ],
                ),
                SizedBox(
                  height: 20,
                ),
                Text(
                  "‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫ï‡∫≥‡ªÅ‡ªú‡ªà‡∫á‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô",
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                    fontFamily: 'Phetsarath',
                  ),
                ),
                SizedBox(
                  height: 20,
                ),
                Container(
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(10),
                    border: Border.all(color: Colors.black, width: 1), // Border
                  ),
                  child: DropdownButton(
                    padding: EdgeInsets.fromLTRB(10, 0, 0, 0),
                    underline: SizedBox.shrink(),
                    isExpanded: true,
                    borderRadius: BorderRadius.circular(20),
                    items: roleData.map((e) {
                      return DropdownMenuItem(
                        child: Text(
                          e["rolename"],
                          style: TextStyle(
                            fontFamily: 'Phetsarath',
                          ),
                        ),
                        value: e["roleID"],
                      );
                    }).toList(),
                    value: _valueRole,
                    onChanged: (v) {
                      setState(() {
                        _valueRole = v as int;
                      });
                    },
                    hint: Text(
                      "‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫ï‡∫≥‡ªÅ‡ªú‡ªà‡∫á",
                      style: TextStyle(
                        fontFamily: 'Phetsarath',
                      ),
                    ),
                  ),
                ),
                SizedBox(
                  height: 30,
                ),
                ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue,
                    padding: EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                  ),
                  onPressed: () {
                    Confirm();
                    print("‡∫•‡∫ª‡∫á‡∫ó‡∫∞‡∫ö‡∫Ω‡∫ô‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î");
                  },
                  // onPressed: _submitDistrict,
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(
                        Icons.print,
                        color: Colors.white,
                      ),
                      SizedBox(
                        width: 5,
                      ),
                      Text(
                        '‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫Å‡∫≤‡∫ô‡∫•‡∫ª‡∫á‡∫ó‡∫∞‡∫ö‡∫Ω‡∫ô',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 15,
                          fontFamily: 'Phetsarath',
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class PhoneNumberTextInputFormatter extends TextInputFormatter {
  @override
  TextEditingValue formatEditUpdate(
    TextEditingValue oldValue,
    TextEditingValue newValue,
  ) {
    // Remove all non-digit characters
    String digitsOnly = newValue.text.replaceAll(RegExp(r'\D'), '');
    if (digitsOnly.length > 11) {
      digitsOnly = digitsOnly.substring(0, 11);
    }

    String formatted = '';
    for (int i = 0; i < digitsOnly.length; i++) {
      if (i == 3) {
        formatted += ' ';
      } else if (i == 7) {
        formatted += '-';
      }
      formatted += digitsOnly[i];
    }

    return TextEditingValue(
      text: formatted,
      selection: TextSelection.collapsed(offset: formatted.length),
    );
  }
}
